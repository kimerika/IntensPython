# Инициализация роста всех 25 учеников как одномерного списка
heights = [170, 176, 165, 182, 175, 174, 179, 180, 182, 185, 190, 184, 172, 167, 180, 178, 173, 181, 177, 183, 171, 186, 169, 168, 187]

# Нахождение индекса ученика с самым высоким и самым низким ростом
max_index = heights.index(max(heights))
min_index = heights.index(min(heights))

# Вывод фамилий учеников с самым высоким и самым низким ростом
students = ["Иванов", "Петров", "Сидоров", "Смирнов", "Кузнецов", "Попов", "Лебедев", "Козлов", "Новиков", "Морозов",
            "Волков", "Андреев", "Орлов", "Денисов", "Макаров", "Федоров", "Соловьев", "Тихонов", "Баранов", "Киселев",
            "Виноградов", "Ковалев", "Белов", "Медведев", "Алексеев"]
print("Самый высокий ученик:", students[max_index])
print("Самый низкий ученик:", students[min_index])

# Нахождение индексов двух учеников с самым высоким ростом, кроме самого высокого ученика класса
second_max_index = heights.index(sorted(heights, reverse=True)[1])
third_max_index = heights.index(sorted(heights, reverse=True)[2])

# Вывод фамилий учеников с самым высоким ростом, кроме самого высокого ученика класса
print("Два ученика с самым высоким ростом, кроме самого высокого ученика класса: {}, {}".format(students[second_max_index], students[third_max_index]))

# Нахождение фамилий двух учеников с самым высоким ростом, без использования двух операторов цикла
max_indexes = sorted(range(len(heights)), key=lambda k: heights[k], reverse=True)[:2]
top_two = [students[i] for i in max_indexes]
print("Два ученика с самым высоким ростом: {}, {}".format(top_two[0], top_two[1]))
